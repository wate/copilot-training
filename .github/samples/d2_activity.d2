# {アクティビティ図のタイトル}
# =========================
# 業務プロセス: {プロセス名}

## レイアウトエンジンとテーマの定義
## -------------------------
vars: {
  d2-config: {
    ### レイアウトエンジン
    ### @see https://d2lang.com/tour/layouts/#layout-engines
    layout-engine: dagre
    ### テーマ
    ### @see https://d2lang.com/tour/themes
    theme-id: 0
  }
}
## Options
## -------------------------
### Direction
# up / down / right / left
### Shapes
# rectangle / square / page / parallelogram / document
# cylinder / queue / package / step / callout / stored_data
# person / diamond / oval / circle / hexagon / cloud
#### Special Shape
# sequence_diagram / sql_table / class
### Styles
# opacity / stroke / stroke-width / stroke-dash / border-radius / font / font-size / font-color
# bold / italic / underline / text-transform / root
#### shape only
# fill / fill-pattern / shadow / multiple
#### rectangle / square only
# 3D
#### rectangles / ovals only
# double-border
#### connection only
# animated

## スタイル定義
## -------------------------
classes: {
  activity: {
    shape: rectangle
    style: {
      fill: "#f5f5f5"
      stroke: "#333333"
      border-radius: 4
      font-size: 14
    }
  }
  decision: {
    shape: diamond
    style: {
      fill: "#ffffcc"
      stroke: "#333333"
      font-size: 14
    }
  }
  start: {
    shape: circle
    style: {
      fill: "#2d7d32"
      stroke: "#333333"
      font-size: 14
    }
  }
  end: {
    shape: circle
    style: {
      fill: "#2d7d32"
      stroke: "#333333"
      double-border: true
      font-size: 14
    }
  }
  fork_join: {
    shape: rectangle
    style: {
      fill: "#333333"
      stroke: "#333333"
      height: 8
      font-size: 14
    }
  }
  object: {
    shape: rectangle
    style: {
      fill: "#dae8fc"
      stroke: "#333333"
      border-radius: 8
      font-size: 14
    }
  }
}

## スイムレーン定義（複数の担当者がいる場合）
## -------------------------
# swimlane_user: {
#   label: "ユーザー"
#   style: {
#     fill: "#f8f9fa"
#     stroke: "#dee2e6"
#   }
# }
#
# swimlane_system: {
#   label: "システム"
#   style: {
#     fill: "#e3f2fd"
#     stroke: "#bbdefb"
#   }
# }

## アクティビティ図の定義
## -------------------------
start_node: {
  class: start
  label: ""
}

# アクティビティの定義
activity1: {
  class: activity
  label: "活動1の説明"
}

# 決定ノードの定義
decision1: {
  class: decision
  label: "条件判断?"
}

# フォークノード（並行処理の開始）
fork1: {
  class: fork_join
  label: ""
}

# 並行アクティビティ
parallel_activity1: {
  class: activity
  label: "並行活動1"
}

parallel_activity2: {
  class: activity
  label: "並行活動2"
}

# ジョインノード（並行処理の合流）
join1: {
  class: fork_join
  label: ""
}

# オブジェクト（成果物やデータ）
object1: {
  class: object
  label: "成果物"
}

end_node: {
  class: end
  label: ""
}

## 制御フローの定義
## -------------------------
start_node -> activity1: "開始"
activity1 -> decision1: "処理完了"
decision1 -> fork1: "Yes"
decision1 -> end_node: "No"
fork1 -> parallel_activity1: ""
fork1 -> parallel_activity2: ""
parallel_activity1 -> join1: ""
parallel_activity2 -> join1: ""
join1 -> object1: "成果物作成"
object1 -> end_node: "完了"
