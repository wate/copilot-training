# {フローチャートのタイトル}
# =========================
# 業務プロセス: {プロセス名}

## レイアウトエンジンとテーマの定義
## -------------------------
vars: {
  d2-config: {
    layout-engine: dagre
    theme-id: 0
  }
}

## スタイル定義
## -------------------------
classes: {
  process: {
    shape: rectangle
    style: {
      fill: "#f5f5f5"
      stroke: "#333333"
      border-radius: 4
      font-size: 14
    }
  }
  decision: {
    shape: diamond
    style: {
      fill: "#ffffcc"
      stroke: "#333333"
      font-size: 14
    }
  }
  terminal: {
    shape: oval
    style: {
      fill: "#d5e8d4"
      stroke: "#333333"
      font-size: 14
    }
  }
  data: {
    shape: parallelogram
    style: {
      fill: "#dae8fc"
      stroke: "#333333"
      font-size: 14
    }
  }
  storage: {
    shape: cylinder
    style: {
      fill: "#e1d5e7"
      stroke: "#333333"
      font-size: 14
    }
  }
  subprocess: {
    shape: rectangle
    style: {
      double-border: true
      fill: "#fff2cc"
      stroke: "#333333"
      font-size: 14
    }
  }
  exception: {
    shape: hexagon
    style: {
      fill: "#f8cecc"
      stroke: "#333333"
      font-size: 14
    }
  }
}

## フローチャートの定義
## -------------------------
start: {
  class: terminal
  label: "開始"
}

# 処理ステップの定義
step1: {
  class: process
  label: "処理1の説明"
}

# 条件分岐の定義
decision1: {
  class: decision
  label: "条件判断?"
}

# データ入出力の定義
input1: {
  class: data
  label: "データ入力"
}

# データ保存の定義
db1: {
  class: storage
  label: "データ保存"
}

# サブプロセスの定義
api_call: {
  class: subprocess
  label: "外部API呼び出し"
}

# 例外処理の定義
error_handler: {
  class: exception
  label: "エラーハンドリング"
}

end: {
  class: terminal
  label: "終了"
}

## 接続の定義
## -------------------------
start -> input1: "開始"
input1 -> step1: "入力を処理"
step1 -> decision1: "判断"
decision1 -> api_call: "Yes"
decision1 -> end: "No"
api_call -> db1: "API成功"
api_call -> error_handler: "API失敗"
error_handler -> end: "エラー処理完了"
db1 -> end: "完了"
