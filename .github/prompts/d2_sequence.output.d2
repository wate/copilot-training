# {シーケンス図のタイトル}
# =========================
# 業務プロセス: {プロセス名}

## レイアウトエンジンとテーマの定義
## -------------------------
vars: {
  d2-config: {
    ### Terminal theme code
    ### @see https://d2lang.com/tour/layouts/#layout-engines
    # layout-engine: {dagre|elk}
    ### Terminal theme code
    ### @see https://d2lang.com/tour/themes
    # theme-id: 0
  }
}
## Options
## -------------------------
### Direction
# up / down / right / left
### Shapes
# rectangle / square / page / parallelogram / document
# cylinder / queue / package / step / callout / stored_data
# person / diamond / oval / circle / hexagon / cloud
#### Special Shape
# sequence_diagram / sql_table / class
### Styles
# opacity / stroke / stroke-width / stroke-dash / border-radius / font / font-size / font-color
# bold / italic / underline / text-transform / root
#### shape only
# fill / fill-pattern / shadow / multiple
#### rectangle / square only
# 3D
#### rectangles / ovals only
# double-border
#### connection only
# animated

## シーケンス図の宣言
## -------------------------
shape: sequence_diagram

## スタイル定義
## -------------------------
classes: {
  actor_human: {
    shape: person
  }
  actor_department: {
    shape: rectangle
  }
  actor_system: {
    shape: cylinder
  }
  message: {
    style: {
      font-size: 12
    }
  }
  operation: {
    style: {
      font-size: 12
    }
  }
  receive: {
    ## 明示的なレスポンスを表す
    style: {
      font-size: 12
      stroke-dash: 3
    }
  }
  notify: {
    ## 弱いレスポンスを表す
    style: {
      font-size: 10
      stroke-width: 1
      stroke-dash: 5
    }
  }
}

## アクターの定義
## -------------------------
user: {
  shape: person
  label: "user"
  class: actor_human
}
customer_support: {
  label: "customer_support"
  class: actor_department
}
development: {
  label: "development"
  class: actor_department
}
system: {
  label: "system"
  class: actor_system
}

## シーケンスの定義
## -------------------------
### 最初のステップ
first_step: {
  label: "最初のステップ"
  user -> customer_support: "依頼" {
    label: "これやって"
    class: message
  }

  customer_support -> customer_support: "内容確認" {
    label: "内容確認"
  }
  customer_support -> system: "チケット起票" {
    class: operation
  }

  customer_support -> user: "受付通知" {
    label: "わかりました！"
    class: receive
  }
}
### 次のステップ
second_step: {
  label: "次のステップ"
  customer_support -> development: "依頼" {
    label: "これやって"
    class: message
  }
  development -> system: "内容確認" {
    class: operation
  }
  development -> customer_support: "受付通知" {
    label: "わかりました！"
    class: receive
  }
}
### 中間のステップ
third_step: {
  label: "中間ステップ"
  development -> system: "ステータス更新" {
    class: operation
  }
  system -> customer_support: "通知" {
    label: "ステータス変更通知"
    class: notify
  }
  customer_support -> user: "通知" {
    label: "作業に着手しました"
    class: message
  }
  development -> system: "進捗率更新" {
    class: operation
  }
  system -> customer_support: "通知" {
    label: "進捗率:25%"
    class: notify
  }
  customer_support -> development: {
    label: "既読"
    class: notify
  }
  development -> system: "進捗率更新" {
    class: operation
  }
  system -> customer_support: "通知" {
    label: "進捗率:50%"
    class: notify
  }
  customer_support -> development: {
    label: "既読"
    class: notify
  }
  development -> customer_support -> user: "進捗報告" {
    label: "折り返し地点です"
    class: message
  }
  customer_support -> development: {
    label: "報告あげときました"
    class: receive
  }
  development -> system: "進捗率更新" {
    class: operation
  }
  system -> customer_support: "通知" {
    label: "進捗率:75%"
    class: notify
  }
  customer_support -> development: {
    label: "既読"
    class: notify
  }
  development -> system: "進捗率更新" {
    class: operation
  }
  system -> customer_support: "通知" {
    label: "進捗率:90%"
    class: notify
  }
  development -> customer_support: "進捗通知" {
    label: "もうすぐ終わりです"
    class: message
  }
  customer_support -> development: {
    label: "Good!"
    class: notify
  }
}
last_step: {
  label: "最後のステップ"
  development -> system: "ステータス更新" {
    class: operation
  }
  system -> customer_support: "ステータス更新通知" {
    class: notify
  }
  development -> customer_support -> user: "完了通知" {
    label: "終わりました"
    class: message
  }
  user -> customer_support -> development: "受領通知" {
    label: "ご苦労さまでした"
    class: receive
  }
}
