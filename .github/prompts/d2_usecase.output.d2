# {ユースケース図のタイトル}
# =========================
# 業務プロセス: {プロセス名}

## レイアウトエンジンとテーマの定義
## -------------------------
vars: {
  d2-config: {
    ### レイアウトエンジン
    ### @see https://d2lang.com/tour/layouts/#layout-engines
    layout-engine: dagre
    ### テーマ
    ### @see https://d2lang.com/tour/themes
    theme-id: 0
  }
}
## Options
## -------------------------
### Direction
# up / down / right / left
### Shapes
# rectangle / square / page / parallelogram / document
# cylinder / queue / package / step / callout / stored_data
# person / diamond / oval / circle / hexagon / cloud
#### Special Shape
# sequence_diagram / sql_table / class
### Styles
# opacity / stroke / stroke-width / stroke-dash / border-radius / font / font-size / font-color
# bold / italic / underline / text-transform / root
#### shape only
# fill / fill-pattern / shadow / multiple
#### rectangle / square only
# 3D
#### rectangles / ovals only
# double-border
#### connection only
# animated

## スタイル定義
## -------------------------
classes: {
  actor: {
    shape: person
    style: {
      fill: "#f5f5f5"
      stroke: "#333333"
      font-size: 14
    }
  }
  system_actor: {
    shape: rectangle
    style: {
      fill: "#d5e8d4"
      stroke: "#333333"
      font-size: 14
    }
  }
  usecase: {
    shape: oval
    style: {
      fill: "#dae8fc"
      stroke: "#333333"
      font-size: 14
    }
  }
  system_boundary: {
    style: {
      fill: "#ffffff"
      stroke: "#333333"
      stroke-dash: 5
      font-size: 16
      bold: true
    }
  }
  include_relation: {
    style: {
      stroke-dash: 3
      italic: true
      font-size: 12
    }
  }
  extend_relation: {
    style: {
      stroke-dash: 3
      italic: true
      font-size: 12
    }
  }
}

## アクターの定義
## -------------------------
actor1: {
  class: actor
  label: "アクター1"
}

actor2: {
  class: actor
  label: "アクター2"
}

## ユースケース図の定義
## -------------------------
# システムの定義
system: {
  class: system_boundary
  label: "システム名"

  # ユースケースの定義
  usecase1: {
    class: usecase
    label: "ユースケース1"
  }

  usecase2: {
    class: usecase
    label: "ユースケース2"
  }

  usecase3: {
    class: usecase
    label: "ユースケース3"
  }
}

# 外部システムアクターの定義
systemActor1: {
  class: system_actor
  label: "外部システム1"
}

## 関連の定義
## -------------------------
# アクターとユースケースの関連
actor1 -> system.usecase1: ""
actor1 -> system.usecase2: ""
actor2 -> system.usecase3: ""
systemActor1 -> system.usecase3: ""

# ユースケース間の関連
system.usecase2 -> system.usecase1: {
  class: include_relation
  label: "<<include>>"
}

system.usecase3 -> system.usecase2: {
  class: extend_relation
  label: "<<extend>>"
}
