# {フローチャートのタイトル}
# =========================
# 業務プロセス: {プロセス名}

## レイアウトエンジンとテーマの定義
## -------------------------
vars: {
  d2-config: {
    ### レイアウトエンジン
    ### @see https://d2lang.com/tour/layouts/#layout-engines
    layout-engine: dagre
    ### テーマ
    ### @see https://d2lang.com/tour/themes
    theme-id: 0
  }
}
## Options
## -------------------------
### Direction
# up / down / right / left
### Shapes
# rectangle / square / page / parallelogram / document
# cylinder / queue / package / step / callout / stored_data
# person / diamond / oval / circle / hexagon / cloud
#### Special Shape
# sequence_diagram / sql_table / class
### Styles
# opacity / stroke / stroke-width / stroke-dash / border-radius / font / font-size / font-color
# bold / italic / underline / text-transform / root
#### shape only
# fill / fill-pattern / shadow / multiple
#### rectangle / square only
# 3D
#### rectangles / ovals only
# double-border
#### connection only
# animated

## スタイル定義
## -------------------------
classes: {
  process: {
    shape: rectangle
    style: {
      fill: "#f5f5f5"
      stroke: "#333333"
      border-radius: 4
      font-size: 14
    }
  }
  decision: {
    shape: diamond
    style: {
      fill: "#ffffcc"
      stroke: "#333333"
      font-size: 14
    }
  }
  terminal: {
    shape: oval
    style: {
      fill: "#d5e8d4"
      stroke: "#333333"
      font-size: 14
    }
  }
  data: {
    shape: parallelogram
    style: {
      fill: "#dae8fc"
      stroke: "#333333"
      font-size: 14
    }
  }
  storage: {
    shape: cylinder
    style: {
      fill: "#e1d5e7"
      stroke: "#333333"
      font-size: 14
    }
  }
}

## フローチャートの定義
## -------------------------
start: {
  class: terminal
  label: "開始"
}

# 処理ステップの定義
step1: {
  class: process
  label: "処理1の説明"
}

# 条件分岐の定義
decision1: {
  class: decision
  label: "条件判断?"
}

# データ入出力の定義
input1: {
  class: data
  label: "データ入力"
}

# データ保存の定義
db1: {
  class: storage
  label: "データ保存"
}

end: {
  class: terminal
  label: "終了"
}

## 接続の定義
## -------------------------
start -> input1: "開始"
input1 -> step1: "入力を処理"
step1 -> decision1: "判断"
decision1 -> db1: "Yes"
decision1 -> end: "No"
db1 -> end: "完了"
